＃　https://javarevisited.blogspot.com/2011/06/top-programming-interview-questions.html

表示（「コージング問題集を始まります」）
導入、試験モジュール
表示（試験モジュール・試験実行）
試験実行＝試験モジュール・試験実行
確認イコール＝試験モジュール・確認イコール
試験一覧＝試験モジュール・試験一覧

＃＃＃
＃＃＃　第一　文字列
＃＃＃　　回文（palindrome）かどうかを確認する関数を作る
＃＃＃

関数、逆文字列（言葉）
　結果＝「」
　関数、ループ（文字）
　　外側、結果
　　結果＝文字＋結果
　それぞれ（言葉、ループ）
　返す、結果

表示（逆文字列（「こんにちは」））

関数、回文ですか（言葉）
　返す、逆文字列（言葉）＝＝言葉

表示（「こんにちは」）
確認、回文ですか（「こんにちは」）＝＝０
表示（「よく行くよ」）
確認、回文ですか（「よく行くよ」）＝＝１

＃＃＃
＃＃＃　第二
＃＃＃　　渡した文字列から、渡した文字を全部消して返す
＃＃＃　　そして、何番目の文字を文字列から消す関数を作ってください。
＃＃＃

関数、文字消す（入力文字列、ダメな文字）
　結果＝「」
　関数、ループ（文字）
　　外側、結果
　　もし、文字！＝ダメな文字
　　　結果＝結果＋文字
　それぞれ（入力文字列、ループ）
　返す、結果

表示（「鼻くそ、鼻」）
確認、文字消す（「鼻くそ」、「鼻」）＝＝「くそ」
表示（「わたしはたぬきではないけど」）
確認、文字消す（「わたしはたぬきではないけど」、「た」）＝＝「わしはぬきではないけど」


関数、部分文字列（入力文字列、始まり、終わり）
　もし、終わり＝＝－１
　　終わり＝長さ（入力文字列）
　結果＝「」
　何番＝０
　関数、ループ（文字）
　　外側、結果、何番
　　もし、何番＞＝始まり
　　　もし、何番＜終わり
　　　　結果＝結果＋文字
　　何番＝何番＋１
　それぞれ（入力文字列、ループ）
　返す、結果

表示（部分文字列（「我々は宇宙狸です」、３、６））
確認、部分文字列（「我々は宇宙狸です」、３、６）＝＝「宇宙狸」
表示（部分文字列（「我々は宇宙狸です」、３、－１））
確認、部分文字列（「我々は宇宙狸です」、３、－１）＝＝「宇宙狸です」

関数、何番目の文字を消す（入力文、添字）
　返す、部分文字列（入力文、０、添字）＋部分文字列（入力文、添字＋１、－１）

表示（何番目の文字を消す（「我々は宇宙狸です」、１））
確認、何番目の文字を消す（「我々は宇宙狸です」、１）＝＝「我は宇宙狸です」
確認、何番目の文字を消す（「我々は宇宙狸です」、０）＝＝「々は宇宙狸です」
確認、何番目の文字を消す（「我々は宇宙狸です」、７）＝＝「我々は宇宙狸で」

＃＃＃
＃＃＃　第三
＃＃＃　　渡した文字列の順列を全部表示する。
＃＃＃　　再帰的と再帰的ではないやり方（recursiveとnot-recursive両方)。
＃＃＃

関数、全順列（入力、表示）
　関数、手伝い（入力、部分）
　　もし、入力＝＝「」
　　　表示（部分）
　　　返す、１
　　関数、ループ（添字）
　　　手伝い（何番目の文字を消す（入力、添字）、部分＋入力【添字】）
　　それぞれ（長さ（入力）、ループ）
　手伝い（入力、「」）

全順列（「私は狸」、表示）

モックな表示＿回数＝０
関数、モックな表示（メッセージ）
　外側、モックな表示＿回数
　モックな表示＿回数＝モックな表示＿回数＋１

もし、部分文字列（FILE、３、－１）＝＝「testpin/../example/codingquestions.tnk」
　全順列（「出来る事」、モックな表示）
　表示（「全順列の数は」、モックな表示＿回数、「回　出来る事色々」）
　確認、モックな表示＿回数＝＝２４
その他
　全順列（「出来る事色々」、モックな表示）
　表示（「全順列の数は」、モックな表示＿回数、「回　出来る事色々」）
　確認、モックな表示＿回数＝＝７２０

＃TODO：再帰的ではないやり方（Steinhaus–Johnson–Trotter方法)

＃＃＃
＃＃＃　第四
＃＃＃　　一番長い入力に入っている回文
＃＃＃

関数、回文検索手伝い（入力、回文長さ）
　一番長い＝「」
　関数、ループ（始まり）
　　外側、一番長い
　　部分＝部分文字列（入力、始まり、始まり＋回文長さ）
　　もし、回文ですか（部分）
　　　一番長い＝部分
　それぞれ（長さ（入力）－回文長さ＋１、ループ）
　返す、一番長い

関数、回文検索パラベター（入力、回文長さ、前の結果）
　もし、回文長さ＞長さ（入力）
　　返す、前の結果
　結果＝回文検索手伝い（入力、回文長さ）
　もし、結果＝＝「」
　　返す、回文検索パラベター（入力、回文長さ＋１、前の結果）
　返す、回文検索パラベター（入力、回文長さ＋１、結果）

関数、回文検索（あ）
　返す、回文検索パラベター（あ、１、「」）

結果＝回文検索（「アイウエオよく行くよあいうえ」）
表示（結果）
確認、結果＝＝「よく行くよ」

もし、部分文字列（FILE、３、－１）！＝「testpin/../example/codingquestions.pin」
　確認、回文検索（「アイウエオよく行くよ」）＝＝「よく行くよ」
　確認、回文検索（「よく行くよアイウエオ」）＝＝「よく行くよ」
　確認、回文検索（「なかきよのとおのねふりのみなめさめなみのりふねのおとのよきかな」）＝＝「なかきよのとおのねふりのみなめさめなみのりふねのおとのよきかな」

＃＃＃　第五
＃＃＃　　初めての二回書いてない文字を返す。
＃＃＃　第六
＃＃＃　　何回か渡した文字は渡した文字列に入っている数を返す
＃＃＃　第七
＃＃＃　　二つの文字列はアナグラムかどうかを返す

＃＃＃
＃＃＃　第八
＃＃＃　　文字列から数字を変更する
＃＃＃

確認、剰余（１２３、１０）＝＝３

関数、数字から文字列（数字）
　もし、数字＜１０
　　返す、「０１２３４５６７８９」【数字】
　返す、数字から文字列（数字／１０）＋数字から文字列（剰余（数字、１０））

表示（数字から文字列（１０６００３２））
確認、数字から文字列（１０６００３２）＝＝「１０６００３２」

＃＃＃
＃＃＃　第九
＃＃＃　　文字列を分ける。分けるの文字を引数にする。
＃＃＃

関数、文字分ける（入力、文字）
　もし、入力＝＝「」
　　返す、配列（入力）
　関数、手伝い（から、まで、結果）
　　もし、まで＞長さ（入力）
　　　返す、結果
　　もし、まで＝＝長さ（入力）
　　　もし、まで！＝から
　　　　返す、結果＋配列（部分文字列（入力、から、まで））
　　　返す、結果
　　もし、入力【まで】＝＝文字
　　　もし、から＝＝まで
　　　　返す、手伝い（まで＋１、まで＋１、結果）
　　　返す、手伝い（まで＋１、まで＋１、結果＋配列（部分文字列（入力、から、まで）））
　　返す、手伝い（から、まで＋１、結果）
　返す、手伝い（０、０、配列（））

関数、試験（）
　表示（文字分ける（「狸・狸語・宇宙狸」、「・」）【０】）
　表示（文字分ける（「狸・狸語・宇宙狸」、「・」））
　あ＝配列イコール（文字分ける（「狸・狸語・宇宙狸」、「・」）、配列（「狸」、「狸語」、「宇宙狸」））
　確認、あ
　確認、配列イコール（文字分ける（「・・狸・・・狸語・・・宇宙狸・・」、「・」）、配列（「狸」、「狸語」、「宇宙狸」））
　確認、配列イコール（文字分ける（「アイウエオ」、「・」）、配列（「アイウエオ」））
　確認、配列イコール（文字分ける（「」、「・」）、配列（「」））
試験一覧・文字分ける＝試験

＃＃＃
＃＃＃　第十　配列
＃＃＃　　配列の中に０から１００までの番号が入っているけど一つは取られました。入っていない番号を返す。
＃＃＃

あ＝期間配列（４３、１０１）＋期間配列（０、４２）
関数、どちら取られた（渡した配列）
　合計＝０
　関数、ループ（番号）
　　外側、合計
　　合計＝合計＋番号
　それぞれ（渡した配列、ループ）
　返す、＿（１００＊１００＋１００）／２－合計

関数、試験（）
　表示（どちら取られた（あ））
　確認、どちら取られた（あ）＝＝４２
試験一覧・どちら取られた＝試験

＃＃＃
＃＃＃　第十一
＃＃＃　　渡した配列の中に二回以上書いている番号を返す。
＃＃＃　　例：　入力は１、２、２、１、４、５　なら結果は２、１
＃＃＃


関数、二回以上検索（入力）
　見た＝辞書（）
　結果＝配列（）
　関数、ループ（番号）
　　キー＝数字から文字列（番号）
　　外側、結果
　　もし、見た【キー】＝＝１
　　　結果＝結果＋配列（番号）
　　もし、見た【キー】＝＝無
　　　見た【キー】＝０
　　見た【キー】＝見た【キー】＋１
　それぞれ（入力、ループ）
　返す、結果

関数、試験（）
　確認、配列イコール（配列（１、２、３）、配列（１、２、３））＝＝１
　確認、配列イコール（配列（１、２、３）、配列（１、２、４））＝＝０
　確認、配列イコール（二回以上検索（配列（１、２、２、１、４、５））、配列（２、１））
試験一覧・二回以上＝試験

＃＃＃
＃＃＃　第十一
＃＃＃　　左側に入っているけど右側に入っていない番号を全部返す。同じ番号を二回返さないでください。
＃＃＃

関数、右に入っていない（左、右）
　結果＝配列（）
　関数、ループ（アイテム）
　　もし、右〜入っている（アイテム）＝＝０
　　　もし、結果〜入っている（アイテム）＝＝０
　　　　結果〜追加（アイテム）
　左〜それぞれ（ループ）
　返す、結果

関数、試験（）
　あ＝配列（１、２、３）
　あ・追加（あ、４）
　確認、あ・入っている（あ、２）＝＝１
　確認、あ・入っている（あ、５）＝＝０
　確認、あ【３】＝＝４
　確認、配列イコール（右に入っていない（配列（１、２、３）、配列（２、３、４））、配列（１））
　表示（右に入っていない（配列（１、０、６、０、０、３、２）、配列（１、２、３））【０】）
　表示（右に入っていない（配列（１、０、６、０、０、３、２）、配列（１、２、３））【１】）
　表示（右に入っていない（配列（１、０、６、０、０、３、２）、配列（１、２、３））【２】）
　確認、配列イコール（右に入っていない（配列（１、０、６、０、０、３、２）、配列（１、２、３））、配列（０、６））

試験一覧・入っている＝試験

＃＃＃
＃＃＃　第十二
＃＃＃　　配列の中の二番目に高い番号を返す
＃＃＃


関数、二番目に高い（入力）
　もし、長さ（入力）＝＝０
　　返す、無
　一番高い＝入力【０】
　二番高い＝無
　関数、ループ（番号）
　　外側、二番高い、一番高い
　　もし、番号＝＝一番高い
　　　無
　　あるいは、番号＝＝二番高い
　　　無
　　あるいは、番号＞一番高い
　　　二番高い＝一番高い
　　　一番高い＝番号
　　あるいは、番号＜一番高い
　　　もし、番号＞二番高い
　　　　二番高い＝番号
　入力〜それぞれ（ループ）
　返す、二番高い

関数、試験（）
　確認、二番目に高い（配列（１、２、３、４、５、４、３））＝＝４
　確認、二番目に高い（配列（１、０、６、０、０、３、２））＝＝３
　確認、二番目に高い（配列（８、６、７、５、３、０、９））＝＝８
　確認、二番目に高い（配列（８））＝＝無
　確認、二番目に高い（配列（））＝＝無
試験一覧・二番目に高い＝試験

＃＃＃
＃＃＃　第十二
＃＃＃　　配列の中では、ペアの合計が渡した番号とイコールを返す。
＃＃＃　　Find all pairs in an array of integers whose sum is equal to the given number
＃＃＃

関数、ペア合計（入力、希望合計）
　見た＝マップ・作成（）
　結果＝配列（）
　関数、ループ（番号）
　　もし、見た〜入っている（希望合計－番号）＝＝１
　　　もし、見た〜入っている（番号）＝＝０
　　　　表示（番号、「と」、希望合計－番号）
　　　　結果〜追加（配列（番号、希望合計－番号））
　　見た〜追加（番号、１）
　入力〜それぞれ（ループ）
　返す、結果

関数、試験（）
　結果＝ペア合計（配列（１、２、３、４、５、６、７、８、９）、５）
　確認、長さ（結果）＝＝２
　確認、配列イコール（結果【０】、配列（３、２））
　確認、配列イコール（結果【１】、配列（４、１））
　結果＝ペア合計（配列（３、１、４、１、５、９、２、５、４）、７）
　確認、長さ（結果）＝＝２
　結果＝ペア合計（配列（３、１、４、１、５、９、２、５、４、－２）、７）
　確認、長さ（結果）＝＝３
試験一覧・ペア合計＝試験

＃＃＃　第十三 How to remove duplicate elements from the array in Java?
＃＃＃　第十四 How to find the largest and smallest number in an array?
＃＃＃　第十五 How to find the top two maximum number in an array?

＃＃＃
＃＃＃　第十六　連結リスト
＃＃＃　　渡した連結リストの真ん中のアイテムを返す。一回しか繰り返してください。
＃＃＃

関数、真ん中（入力）
　関数、手伝い（アイテム、結果、プラスするか）
　　もし、アイテム＝＝無
　　　返す、結果・内容
　　もし、プラスするか＝＝１
　　　返す、手伝い（アイテム・次、結果・次、０）
　　もし、プラスするか＝＝０
　　　返す、手伝い（アイテム・次、結果、１）
　返す、手伝い（入力・初め、入力・初め、０）

関数、試験（）
　リスト＝連結リスト・作成（１、０、６、８、０、３、２）
　確認、真ん中（リスト）＝＝８
　リスト＝連結リスト・作成（１、０、６、８、３、２）
　確認、真ん中（リスト）＝＝８
　リスト＝連結リスト・作成（８）
　確認、真ん中（リスト）＝＝８
試験一覧・真ん中＝試験

＃＃＃
＃＃＃　第十八
＃＃＃　　連結リストの中にサイクルがあるかどうかを返す。一回しか繰り返してください。
＃＃＃

関数、サイクルある（入力）
　関数、手伝い（前、今、プラスする：０）
　　もし、今＝＝無
　　　返す、０
　　もし、前＝＝今
　　　返す、１
　　もし、プラスする
　　　返す、手伝い（前・次、今・次、プラスする：プラスする〜否定（））
　　返す、手伝い（前、今・次、プラスする：プラスする〜否定（））
　返す、手伝い（入力・初め、入力・初め・次）

関数、試験（）
　リスト＝連結リスト・作成（１、０、６、８、０、３、２）
　確認、サイクルある（リスト）＝＝０
　リスト＝連結リスト・作成（１、０、６、８、０、３、２）
　リスト・初め・次・次・次・次・次＝リスト・初め・次・次
　確認、サイクルある（リスト）＝＝１
試験一覧・サイクル＝試験

＃＃＃
＃＃＃　第十九
＃＃＃　　連結リストの逆を返す。新しい辞書を作成せず実装する（in place）。
＃＃＃

関数、逆連結（入力）
　前＝無
　関数、手伝い（アイテム）
　　外側、前
　　もし、アイテム＝＝無
　　　返す、無
　　次＝アイテム・次
　　アイテム・次＝前
　　前＝アイテム
　　手伝い（次）
　手伝い（入力・初め）
　入力・初め＝前

関数、試験一覧・逆連結（）
　り＝連結リスト・作成（１、２、３、４、５、６）
　逆連結（り）
　確認、り〜同等（連結リスト・作成（６、５、４、３、２、１））
　
　り＝連結リスト・作成（）
　逆連結（り）
　確認、り〜同等（連結リスト・作成（））
　
　り＝連結リスト・作成（８）
　逆連結（り）
　確認、り〜同等（連結リスト・作成（８））

＃＃＃
＃＃＃　第二十　二分木について
＃＃＃　　木の深さを返す関数。
＃＃＃

二分木＝辞書（）
関数、二分木・作成（）
　自分＝辞書（二分木）
　自分・根＝無
　返す、自分

関数、二分木・深さ（自分）
　関数、手伝い（節、結果）
　　もし、節＝＝無
　　　返す、結果
　　左深さ＝手伝い（節・左、結果）
　　右深さ＝手伝い（節・右、結果）
　　もし、左深さ＞右深さ
　　　返す、左深さ＋１
　　返す、右深さ＋１
　返す、手伝い（自分・根、０）

関数、二分木・追加（自分、入力）
　新しい節＝辞書（左：無、右：無、中身：入力、親：無）
　もし、自分・根＝＝無
　　自分・根＝新しい節
　　返す、無
　関数、手伝い（節）
　　新しい節・親＝節
　　もし、入力＜＝節・中身
　　　もし、節・左＝＝無
　　　　節・左＝新しい節
　　　その他
　　　　手伝い（節・左）
　　その他
　　　もし、節・右＝＝無
　　　　節・右＝新しい節
　　　その他
　　　　手伝い（節・右）
　返す、手伝い（自分・根）

関数、試験一覧・木の深さ（）
　木＝二分木・作成（）
　木〜追加（５）
　確認、木〜深さ（）＝＝１
　木〜追加（７）
　確認、木〜深さ（）＝＝２
　木〜追加（８）
　木〜追加（８）
　木〜追加（１）
　確認、木〜深さ（）＝＝４
　木〜追加（２）
　木〜追加（３）
　木〜追加（４）
　確認、木〜深さ（）＝＝５

関数、二分木・右回り（自分、節）
　部分の親＝節・親
　新しい根＝節・左
　新しい根・親＝部分の親
　節・親＝新しい根
　節・左＝新しい根・右
　節・左・親＝節
　新しい根・右＝節
　もし、自分・根＝＝節
　　自分・根＝新しい根
　あるいは、部分の親・右＝＝節
　　部分の親・右＝新しい根
　その他
　　部分の親・左＝新しい根
　返す、無

関数、二分木・左回り（自分、節）
　部分の親＝節・親
　新しい根＝節・右
　新しい根・親＝部分の親
　節・親＝新しい根
　節・右＝新しい根・左
　節・右・親＝節
　新しい根・左＝節
　もし、自分・根＝＝節
　　自分・根＝新しい根
　あるいは、部分の親・右＝＝節
　　部分の親・右＝新しい根
　その他
　　部分の親・左＝新しい根
　返す、無

関数、試験一覧・右回り（）
　木＝二分木・作成（）
　木〜追加（５）
　木〜追加（３）
　木〜右回り（木・根）
　確認、木・根・中身＝＝３
　確認、木・根・右・中身＝＝５
　＃
　＃　　　５　　　　　　３
　＃　３　　６　》　２　　　５
　＃２　４　　　　　　　　４　６
　＃
　木＝二分木・作成（）
　木〜追加（５）
　木〜追加（３）
　木〜追加（６）
　木〜追加（２）
　木〜追加（４）
　木〜右回り（木・根）
　確認、木・根・中身＝＝３
　確認、木・根・右・中身＝＝５
　確認、木・根・左・中身＝＝２
　確認、木・根・右・右・中身＝＝６
　確認、木・根・右・左・中身＝＝４
　
　確認、木・根・親＝＝無
　確認、木・根・右・親・中身＝＝３
　確認、木・根・左・親・中身＝＝３
　確認、木・根・右・右・親・中身＝＝５
　確認、木・根・右・左・親・中身＝＝５
　＃　　　　１０　　　　　　　　１０
　＃　　　５　　　　　　　　　３
　＃　３　　６　　　》　　２　　　５
　＃２　４　　　　　　　　　　　４　６
　＃
　木＝二分木・作成（）
　木〜追加（１０）
　木〜追加（５）
　木〜追加（３）
　木〜追加（６）
　木〜追加（２）
　木〜追加（４）
　木〜右回り（木・根・左）
　確認、木・根・左・中身＝＝３
　確認、木・根・左・右・中身＝＝５
　確認、木・根・左・左・中身＝＝２
　確認、木・根・左・右・右・中身＝＝６
　確認、木・根・左・右・左・中身＝＝４
　
　確認、木・根・左・親・中身＝＝１０
　確認、木・根・左・右・親・中身＝＝３
　確認、木・根・左・左・親・中身＝＝３
　確認、木・根・左・右・右・親・中身＝＝５
　確認、木・根・左・右・左・親・中身＝＝５

関数、試験一覧・左回り（）
　木＝二分木・作成（）
　木〜追加（３）
　木〜追加（５）
　木〜左回り（木・根）
　確認、木・根・中身＝＝５
　確認、木・根・左・中身＝＝３
　＃
　＃　　　５　　　　　　３
　＃　３　　６　《　２　　　５
　＃２　４　　　　　　　　４　６
　＃
　木＝二分木・作成（）
　木〜追加（３）
　木〜追加（２）
　木〜追加（５）
　木〜追加（４）
　木〜追加（６）
　木〜左回り（木・根）
　確認、木・根・中身＝＝５
　確認、木・根・左・中身＝＝３
　確認、木・根・右・中身＝＝６
　確認、木・根・左・左・中身＝＝２
　確認、木・根・左・右・中身＝＝４
　
　確認、木・根・親＝＝無
　確認、木・根・左・親・中身＝＝５
　確認、木・根・右・親・中身＝＝５
　確認、木・根・左・左・親・中身＝＝３
　確認、木・根・左・右・親・中身＝＝３
　＃　　　　１０　　　　　　　　１０
　＃　　　５　　　　　　　　　３
　＃　３　　６　　　《　　２　　　５
　＃２　４　　　　　　　　　　　４　６
　＃
　木＝二分木・作成（）
　木〜追加（１０）
　木〜追加（３）
　木〜追加（２）
　木〜追加（５）
　木〜追加（４）
　木〜追加（６）
　木〜左回り（木・根・左）
　確認、木・根・左・中身＝＝５
　確認、木・根・左・左・中身＝＝３
　確認、木・根・左・右・中身＝＝６
　確認、木・根・左・左・左・中身＝＝２
　確認、木・根・左・左・右・中身＝＝４
　
　確認、木・根・左・親・中身＝＝１０
　確認、木・根・左・左・親・中身＝＝５
　確認、木・根・左・右・親・中身＝＝５
　確認、木・根・左・左・左・親・中身＝＝３
　確認、木・根・左・左・右・親・中身＝＝３


＃＃＃終わり

試験モジュール・全試験実行（）
