const wchar_t *coreTanukiStarter = LR"(

表示（「狸語・プログラミング言語　〈バージョン０.４.１１〉」）
バージョン＝１

関数、インポート（ファイル名）
　ファイルテキスト＝ファイル読む（ファイル名）
　返す、評価（ファイルテキスト）

関数、無を返す関数（）
　あ＝１

無＝無を返す関数（）

配列型＝辞書（）

関数、配列（＊引数、大きさ：無）
　もし、大きさ＝＝０
　　返す、配列（）
　もし、大きさ！＝無
　　返す、配列（無）＋配列（大きさ：大きさ－１）
　親設定する（引数、配列型）
　返す、引数

関数、新（自分、番号）
　配列追加（自分、番号）
配列型・追加＝新

配列型・それぞれ＝それぞれ

関数、配列型・写像（自分、写像関数）
　結果＝配列（）
　自分〜それぞれ（）：項目
　　外側、結果
　　結果＝結果＋配列（写像関数（項目））
　返す、結果


番号型＝辞書（）

関数、か（自分）
　返す、数字から文字列（自分）
番号型・文字列＝か

関数、か（自分）
　もし、自分＜０
　　返す、０－自分
　返す、自分
番号型・ハッシュ＝か

関数、番号型・否定（自分）
　もし、自分
　　返す、０
　返す、１

文字列型＝辞書（）

関数、か（自分）
　返す、自分
文字列型・文字列＝か

文字列型・それぞれ＝それぞれ


辞書型＝辞書（）



関数型＝辞書（）



関数、新関数（自分、アイテム）
　関数、手伝い（番）
　　もし、番＝＝長さ（自分）
　　　返す、０
　　もし、自分【番】＝＝アイテム
　　　返す、１
　　返す、手伝い（番＋１）
　返す、手伝い（０）
配列型・入っている＝新関数

関数、期間配列（から、まで）
　もし、から＞＝まで
　　返す、配列（）
　返す、配列（から）＋期間配列（から＋１、まで）

関数、＿（あ）
　返す、あ



関数、部分文字列（入力文字列、始まり、終わり）
　もし、終わり＝＝－１
　　終わり＝長さ（入力文字列）
　結果＝「」
　何番＝０
　関数、ループ（文字）
　　外側、結果、何番
　　もし、何番＞＝始まり
　　　もし、何番＜終わり
　　　　結果＝結果＋文字
　　何番＝何番＋１
　それぞれ（入力文字列、ループ）
　返す、結果


関数、逆文字列（言葉）
　結果＝「」
　関数、ループ（文字）
　　外側、結果
　　結果＝文字＋結果
　それぞれ（言葉、ループ）
　返す、結果

関数、配列イコール（左、右）
　もし、長さ（左）！＝長さ（右）
　　返す、０
　関数、ループ（左、右、番号）
　　もし、長さ（左）＝＝番号
　　　返す、１
　　もし、左【番号】！＝右【番号】
　　　返す、０
　　返す、ループ（右、左、番号＋１）
　返す、ループ（左、右、０）


関数、数字から文字列（数字）
　もし、数字＜１０
　　返す、「０１２３４５６７８９」【数字】
　返す、数字から文字列（数字／１０）＋数字から文字列（剰余（数字、１０））

関数、文字分ける（入力、文字）
　もし、入力＝＝「」
　　返す、配列（入力）
　関数、手伝い（から、まで、結果）
　　もし、まで＞長さ（入力）
　　　返す、結果
　　もし、まで＝＝長さ（入力）
　　　もし、まで！＝から
　　　　返す、結果＋配列（部分文字列（入力、から、まで））
　　　返す、結果
　　もし、入力【まで】＝＝文字
　　　もし、から＝＝まで
　　　　返す、手伝い（まで＋１、まで＋１、結果）
　　　返す、手伝い（まで＋１、まで＋１、結果＋配列（部分文字列（入力、から、まで）））
　　返す、手伝い（から、まで＋１、結果）
　返す、手伝い（０、０、配列（））

＃＃＃マップ＃＃＃

マップ＝辞書（）
マップ・デフォルト大きさ＝５

関数、か（）
　自分＝辞書（マップ）
　自分・内容＝配列（大きさ：マップ・デフォルト大きさ）
　返す、自分
マップ・作成＝か

関数、か（自分、キー、値）
　自分〜消す（キー）
　ハッシュ＝キー〜ハッシュ（）
　部分＝剰余（ハッシュ、長さ（自分・内容））
　もし、自分・内容【部分】＝＝無
　　自分・内容【部分】＝配列（）
　自分・内容【部分】〜追加（配列（キー、値））
　返す、自分
マップ・追加＝か

関数、か（自分、キー）
　ハッシュ＝キー〜ハッシュ（）
　器番号＝剰余（ハッシュ、長さ（自分・内容））
　器＝自分・内容【器番号】
　もし、器＝＝無
　　返す、０
　結果＝０
　関数、ループ（ペア）
　　外側、結果
　　もし、ペア【０】＝＝キー
　　　結果＝１
　器〜それぞれ（ループ）
　返す、結果
マップ・入っている＝か

関数、か（自分、キー）
　ハッシュ＝キー〜ハッシュ（）
　器番号＝剰余（ハッシュ、長さ（自分・内容））
　器＝自分・内容【器番号】
　もし、器＝＝無
　　返す、無
　結果＝無
　関数、ループ（ペア）
　　外側、結果
　　もし、ペア【０】＝＝キー
　　　結果＝ペア【１】
　器〜それぞれ（ループ）
　返す、結果
マップ・出す＝か

関数、か（自分、キー）
　ハッシュ＝キー〜ハッシュ（）
　器番号＝剰余（ハッシュ、長さ（自分・内容））
　器＝自分・内容【器番号】
　新しい器＝配列（）
　もし、器＝＝無
　　返す、自分
　関数、ループ（ペア）
　　もし、ペア【０】！＝キー
　　　新しい器〜追加（ペア）
　器〜それぞれ（ループ）
　自分・内容【器番号】＝新しい器
　返す、自分
マップ・消す＝か

＃＃＃＃＃＃＃＃＃＃＃
連結リスト＝辞書（）
＃＃＃＃＃＃＃＃＃＃＃
関数、連結リスト・作成（＊情報）
　自分＝辞書（連結リスト）
　自分・初め＝無
　関数、ループ（アイテム）
　　自分〜追加（アイテム）
　情報〜それぞれ（ループ）
　返す、自分

関数、連結リスト・追加（自分、新しい）
　もし、自分・初め＝＝無
　　自分・初め＝辞書（内容：新しい、次：無）
　　返す、無
　関数、手伝い（最後）
　　もし、最後・次＝＝無
　　　最後・次＝辞書（内容：新しい、次：無）
　　その他
　　　手伝い（最後・次）
　手伝い（自分・初め）

関数、連結リスト・長さ（自分）
　結果＝０
　関数、ループ（アイテム）
　　外側、結果
　　結果＝結果＋１
　自分〜それぞれ（ループ）
　返す、結果

関数、連結リスト・それぞれ（自分、入力関数）
　関数、手伝い（アイテム）
　　もし、アイテム＝＝無
　　　返す、無
　　結果＝入力関数（アイテム・内容）
　　もし、結果＝＝１
　　　返す、無
　　返す、手伝い（アイテム・次）
　返す、手伝い（自分・初め）

関数、連結リスト・同等（自分、別）
　関数、手伝い（左、右）
　　もし、左＝＝無
　　　返す、右＝＝無
　　もし、右＝＝無
　　　返す、０
　　もし、左・内容！＝右・内容
　　　返す、０
　　返す、手伝い（左・次、右・次）
　返す、手伝い（自分・初め、別・初め）

番号フロート型＝辞書（）

)";
